来自https://www.xiaolincoding.com/os/
二. 硬件架构
冯诺依曼模型
运算器 控制器 存储器 输入 输出
cpu-(寄存器 控制单元 逻辑单元)
寄存器-(通用寄存器 程序计数器 指令寄存器)

CPU 访问数据的时候，先是访问 CPU Cache 是一次性读取一块一块的数据存放到 CPU Cach

CPU Cache 【写回】操作
缓存一致性问题:
1.写传播-某个CPU核心里的Cache数据更新时 必须传播到其他核心的Cache
2.事务的串行化-某个CPU核心里对数据的操作顺序 必须在其他核心看起来是一样的( CPU对于Cache的更新 要同步到其他CPU; 引入锁的概念 只有拿到锁 才能进行对于数据的更新)

写传播和事务串行化的技术实现
1.总线嗅探机制保证了写传播
2.基于总线嗅探机制实现了事务串行化，也用状态机机制降低了总线带宽压力，这个协议就是 MESI 协议
「共享」状态代表着相同的数据在多个 CPU 核心的 Cache 里都有，所以当我们要更新 Cache 里面的数据的时候，不能直接修改，而是要先向所有的其他 CPU 核心广播一个请求，要求先把其他核心的 Cache 中对应的 Cache Line 标记为「无效」状态，然后再更新当前 Cache 里面的数据

伪共享和避免
Cache Line大小为64字节 一个Long[] 每个元素占用8字节 多个CPU修改不同元素 会造成伪共享问题; 因此对于多个线程共享的问题 应该避免这些数据刚好在一个Cache Line中 在 Linux 内核中存在 __cacheline_aligned_in_smp 宏定义，是用于解决伪共享的问题

中断机制
在计算机中，中断是系统用来响应硬件设备请求的一种机制，操作系统收到硬件的中断请求，会打断正在执行的进程，然后调用内核中的中断处理程序来响应请求
而且，中断处理程序在响应中断时，可能还会「临时关闭中断」，这意味着，如果当前中断处理程序没有执行完之前，系统中其他的中断请求都无法被响应，也就说中断有可能会丢失，所以中断处理程序要短且快。
上半部直接处理硬件请求，也就是硬中断
下半部是由内核触发，也就说软中断

三. 操作系统结构
内核作为应用连接硬件设备的桥梁



四. 内存管理
虚拟内存
CPU->虚拟地址->MMU->物理地址
内存分段
内存分页
段页式内存管理
Linux内存管理

五. 进程管理
进程
线程
调度

进程通信方式: 管道 消息队列 共享内存 信号量 信号 socket

六. 调度算法
进程调度算法

页面置换算法

磁盘调度算法

七. 文件系统
1.索引节点和目录项

八. 设备管理

九. 网络系统

十. Linux命令

