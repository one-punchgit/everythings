一. 类加载机制
创建引导类加载器(c++实现)->创建Launcher类->创建其他类加载器->classLoader.loadClass("java.lang.String");
加载:生成Class对象
验证:校验字节码文件正确性
准备:给类的静态变量分配内存,赋默认值
解析:将符号引用替换成直接引用
初始化:对类的变量初始化指定的值，执行静态代码块

类加载器和双亲委派机制
1.检查类是否加载过
2.是否有父类加载器
3.如果父类加载器都没有加载成功,则自身调用加载findClass

为什么要设计双亲委派?
1.保证核心库的安全
2.保证类只加载一份

全盘负责: 当一个classLoader加载一个类时,除非显示引用其他类加载器,否则该类所依赖或引用的类都用这个类加载器加载

自定义类加载器:继承classLoader类 loadClass(),findClass()
当使用自己的类加载器加载自己写的java.lang.String 会发生异常: Prohibited package name: java.lang


tomcat要打破双亲委派机制:tomcat内多个war,每个war引入的依赖版本可能不同,使用webAppClassLoader 各个war自己的类加载器
模拟tomcat打破双亲委派,重写loadClass()方法
if("name".equals("com.test.zb.Test")){
    this.parent().loadClass();
}else{
    findClass();
}

同一个jvm下 相同的包名类名可以共存 类加载器不一样

二. Jvm内存模型
-------------------------------|
堆           栈       本地方法栈  | <- 类装载子系统
                               |
方法区         程序计数器         | <- 字节码执行引擎
-------------------------------|

main线程
------         |
               |
 程序计数器      |
               |
 线程           |
               |
 本地方法栈      |
------         |

三. 对象的分配
1. 类加载检查
2. 分配内存
指针碰撞-默认:内存都是整齐排列 使用过放一边;
空闲列表:内存不是规整的 维护一个列表 记录哪些内存可用
解决并发: cas+失败重试  本地线程分配TLAB默认开启
3. 初始化
4. 设置对象头
JOLSample测试类  ClassLayout 可以查看对象大小
mark word 8字节 klass pointer 类元数据指针 4字节  数组长度4字节
5. 执行init方法 构造方法


默认开启指针压缩 -XX:+UseCompressedOops

对象分配流程
start -> new Object() -> 栈内分配 -> 栈 通过逃逸分析 后进行标量替换
                            |
                          大对象 -> 老年代
                            |
                           TLAB -> eden

对象动态年龄判断:Survivor大于50% 会将年龄最大的放入老年代
老年代空间分配担保机制:年轻代每次minor gc前都会计算老年代剩余可用空间 如果小于年轻代所有对象大小 就需要执行full gc

对象回收
引用计数法
可达性分析: 线程的本地变量 静态变量 本地方法栈变量

四：常量池:
字面量
符号引用

五: 垃圾收集器

垃圾收集算法
分代理论思想
复制算法
标记清除算法
标记整理算法

Serial    ParNew    Parallel

CMS     Serial Old  Parallel Old


G1  ZGC


CMS: 初始标记 并发标记 重新标记 并发清理  并发重置
               (三色标记-增量更新)
黑色 本对象及所有引用都已经访问过 安全对象
灰色 本对象访问过 但是至少有一个引用没有访问过
白色 未被访问对象

会有浮动垃圾的产生 但是无妨 最重要的是不要发生漏标的事情
解决漏标: 技术手段 写屏障
增量更新 黑色指向白色后 记录变化 并发扫描后 重新遍历
原始快照
跨代:记忆集和卡表

六: G1和ZGC
g1: 划分Region, 有专门的大对象区域
初始标记  并发标记 最终标记  筛选回收
                        (回收价值和成本排序 并根据用户期望值-XX:MaxGCPauseMill)
YoungGC
MixedGC
FullGC

ZGC: 基于Region内存布局 暂时不设分代 使用了读屏障和颜色指针

七: JVM调优工具
jmap -heap pid 【jdk8以后用后面命令】jhsdb jmap --heap --pid 1
结果展示为堆内存相关信息 堆快照信息
java -XX:+PrintCommandLineFlags -version
结果显示jdk版本 gc类别

jinfo -flags pid
结果显示vm 参数
jstack pid
结果显示线程信息


八. JIT
字节码文件---    执行引擎    -----  机器码
     解释器-逐行解释     JIT

热点代码
标量替换
逃逸分析